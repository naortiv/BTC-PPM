import json
import requests
import pandas as pd
import datetime as dt
import numpy as np
import time
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR

# get bars of symbol in interval (1m/1h/1d), limit its the number of bars (1500 max by the site)
def get_bars(symbol, interval, limit):
    url = 'https://fapi.binance.com/fapi/v1/klines' + '?symbol=' + symbol + '&interval=' + interval + '&limit=' + limit
    data = json.loads(requests.get(url).text)
    df = pd.DataFrame(data)
    df.columns = ['open_time',
                  'o', 'h', 'l', 'c', 'v',
                  'close_time', 'qav', 'num_trades',
                  'taker_base_vol', 'taker_quote_vol', 'ignore']
    df.index = [dt.datetime.fromtimestamp(x / 1000.0) for x in df.close_time]
    return df

avg = 0

df = get_bars('VETUSDT', '1m', '1500')

# take only the close price
df = df[['c']].astype('float')

# number of future prices predict
forecast_out = 10

# prepar the
df['prediction'] = df[['c']].shift(-forecast_out)
x = np.array(df.drop(['prediction'], 1))
x = x[:-forecast_out]
y = np.array(df['prediction'])
y = y[:-forecast_out]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.5)

# svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)
# svr_rbf.fit(x_train, y_train)
#
# svm_confidence = svr_rbf.score(x_test, y_test)
# print("svm confidence:", svm_confidence)

lr = LinearRegression()
lr.fit(x_train, y_train)

lr_con = lr.score(x_test, y_test)
print("lr con:", lr_con)

x_forecast = np.array(df.drop(['prediction'], 1))[-forecast_out:]

lr_pred = lr.predict(x_forecast)
# lr_pred
print(lr_pred)
